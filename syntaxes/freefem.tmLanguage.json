{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "FreeFEM",
	"scopeName": "source.edp",
	"patterns": [
		{
			"include": "#statement"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"statement":{
			"patterns": [
				{
					"include": "#import"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#macro-declaration"
				},
				{
					"include": "#statement-keyword"
				},
				{
					"include": "#assignment-operator"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#docstring-statement"
				},
				{
					"include": "#semicolon"
				}
			]
		},
		"import":{
			"patterns": [
			{
				"begin": "\\b(?<!\\.)(load|include)\\b",
				"end": "$",
				"beginCaptures":{
					"1": {"name": "keyword.control.import.freefem"}
				},
				"patterns": [
					{
						"include": "#expression"
					}
				]
			}
			]
		},
		"function-declaration": {
			"patterns": [
				{
					"include": "#function-declaration-multi-lines"
				},
				{
					"include": "#function-declaration-single-line"
				}
			]
		},
		"function-declaration-multi-lines":{
			"name": "meta.function.freefem",
			"begin": "(?x)  \\s* \\b(func)\\s+ ([[:alpha:]_][[:word:]]*)(?:(\\[)([[:alpha:]_][[:word:]]*)(\\]))? \\s+  ([[:alpha:]_][[:word:]]* \\s* )(?=\\()",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.freefem"
				},
				"2": {
					"name": "support.type.freefem"
				},
				"3": {
					"name": "punctuation.definition.list.begin.freefem"
				},
				"4": {
					"name": "support.type.freefem"
				},
				"5": {
					"name": "punctuation.definition.list.end.freefem"
				},
				"6": {
					"name": "entity.name.function.freefem"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.function.end.freefem"
				}
			},
			"patterns": [
				{
					"include": "#builtin-types"
				},
				{
					"include": "#arguments"
				},
				{
					"include": "#function-body"
				}
			]
		},
		"function-declaration-single-line":{
			"name": "meta.function.freefem",
			"begin": "(?x)  \\s* \\b(func)\\s+ ([[:alpha:]_][[:word:]]* \\s* )(=)",
			"end": "(;)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.freefem"
				},
				"2": {
					"name": "entity.name.function.freefem"
				},
				"3": {
					"name": "keyword.operator.definition.function.freefem"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.function.end.freefem"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"arguments": {
			"name": "meta.arguments.arguments.freefem",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.freefem"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.freefem"
				}
			},
			"patterns": [
				{
					"include": "#builtin-types"
				},
				{
					"include": "#list"
				},
				{
					"name": "keyword.operator.unpacking.parameter.freefem",
					"match": "(\\*\\*|\\*)"
				}
			]
		},
		"function-body": {
			"name": "meta.function.body.freefem",
			"begin": "(\\{)",
			"end": "(?=\\})",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.freefem"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"macro-declaration": {
			"name": "meta.macro.freefem",
			"begin": "(?x)  \\s* \\b(macro)\\s+ ([[:alpha:]_][[:word:]]* \\s* )",
			"end": "(//)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.macro.freefem"
				},
				"2": {
					"name": "entity.name.macro.freefem"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.macro.end.freefem"
				}
			},
			"patterns": [
				{
					"include": "#arguments"
				},
				{
					"include": "$self"
				}
			]
		},
		"assignment-operator":{
			"name": "keyword.operator.assignment.freefem",
			"match": "(?x)<<= | >>= | //= | \\*\\*=| \\+= | -= | /= | @=| \\*= | %= | ~= | \\^= | &= | \\|=| =(?!=)"
		},
		"semicolon": {
			"patterns": [
				{
					"name": "punctuation.terminator.statement.freefem",
					"match": "\\;\\s*$"
				}
			]
		},
		"expression":{
			"comment": "All valid FreeFEM expressions",
			"patterns": [
			{
				"include": "#expression-base"
			},
			{
				"include": "#member-access"
			}
			]
		},
		"member-access": {
			"name": "meta.member.access.freefem",
			"begin": "(\\.)\\s*(?!\\.)",
			"end": "(?x)\n  # stop when you've just read non-whitespace followed by non-word\n  # i.e. when finished reading an identifier or function call\n  (?<=\\S)(?=\\W) |\n  # stop when seeing the start of something that's not a word,\n  # i.e. when seeing a non-identifier\n  (^|(?<=\\s))(?=[^\\\\\\w\\s]) |\n  $\n",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.freefem"
				}
			},
			"patterns": [
				{
					"include": "#function-call"
				},
				{
					"include": "#builtin-member-access"
				}
			]
		},
		"expression-base":{
			"comment": "valid FreeFEM expressions with comments and line continuation",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#expression-bare"
				},
				{
					"include": "#line-continuation"
				}
			]
		},
		"comments": {
			"patterns": [{
					"name": "comment.line.freefem",
					"match": "//.*"
				},
				{
					"name": "comment.block.freefem",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [{}]
				}
			]
		},
		"expression-bare":{
			"comment": "valid FreeFEM expressions w/o comments and line continuation",
			"patterns": [
			{
				"include": "#backticks"
			},
			{
				"include": "#illegal-anno"
			},
			{
				"include": "#literal"
			},
			{
				"include": "#regexp"
			},
			{
				"include": "#string"
			},
			{
				"include": "#lambda"
			},
			{
				"include": "#illegal-operator"
			},
			{
				"include": "#operator"
			},
			{
				"include": "#curly-braces"
			},
			{
				"include": "#item-access"
			},
			{
				"include": "#list"
			},
			{
				"include": "#round-braces"
			},
			{
				"include": "#function-call"
			},
			{
				"include": "#builtin-functions"
			},
			{
				"include": "#builtin-types"
			},
			{
				"include": "#builtin-exceptions"
			},
			{
				"include": "#magic-names"
			},
			{
				"include": "#special-names"
			},
			{
				"include": "#illegal-names"
			},
			{
				"include": "#special-variables"
			},
			{
				"include": "#ellipsis"
			},
			{
				"include": "#punctuation"
			}
			]
		},
		"literal":{
			"patterns": [
				{
					"name": "constant.language.freefem",
					"match": "\\b(True|False|None|pi)\\b"
				},
				{
					"match": "\\b((?:(?:[0-9]+\\.?[0-9]*)|(?:\\.[0-9]+))(?:(?:E|e)(?:\\+|-)?[0-9]+)?)(i)?\\b",
					"name": "constant.numeric.freefem",
					"captures": {
						"2":{"name":"storage.type.imaginary.number.freefem"}
					}
				}
			]
		},
		"string": {
			"name": "string.quoted.double.freefem",
			"begin": "\"",
			"end": "(?<!\\\\)\"|((?<!\\\\)\\n)",
			"beginCaptures":{
				"1": {"name": "punctuation.definition.string.begin.freefem"}
			},
			"endCaptures":{
				"1":{"name": "punctuation.definition.string.end.freefem"}
			}
		},
		"operator":{
		"match": "(?x) (!|\\&\\&|\\|\\||\\?)(?# 1)| \\b(?<!\\.)(for | if | else | return | try | while | break | catch | continue | IFMACRO | ENDIFMACRO)(?!\\s*:)\\b  (?# 2)| (<< | >> | \\^)(?# 3)| (\\*\\* | \\* | \\+ | - | % | / | \\+\\+ | --)(?# 4)| (!= | == | >= | <= | < | >)(?# 5)",
		"captures":{
			"1":{"name": "keyword.operator.logical.freefem"},
			"2":{"name": "keyword.control.flow.freefem"},
			"3":{"name": "keyword.operator.bitwise.freefem"},
			"4":{"name": "keyword.operator.arithmetic.freefem"},
			"5":{"name": "keyword.operator.comparison.freefem"}
			}
		},
		"list":{
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures":{
				"0": {"name": "punctuation.definition.list.begin.freefem"}
			},
			"endCaptures":{
				"0":{"name": "punctuation.definition.list.end.freefem"}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#builtin-parameters"
				}
			]
		},
		"round-braces":{
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures":{
			"0": {"name": "punctuation.parenthesis.begin.freefem"}
			},
			"endCaptures":{
				"0": {"name": "punctuation.parenthesis.end.freefem"}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"curly-braces": {
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.dict.begin.freefem"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.dict.end.freefem"
				}
			},
			"patterns": [
				{
					"match": ";",
					"name":"punctuation.terminator.statement.freefem"
				},
				{
					"include": "$self"
				}
			]
		},
		"function-call": {
			"name": "meta.function-call.freefem",
			"begin": "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.freefem"
				}
			},
			"patterns": [
				{
					"include": "#special-variables"
				},
				{
					"include": "#function-name"
				},
				{
					"include": "#function-arguments"
				}
			]
		},
		"function-name": {
			"patterns": [
				{
					"include": "#builtin-possible-callables"
				},
				{
					"comment": "Some color schemas support meta.function-call.generic scope",
					"name": "meta.function-call.generic.freefem",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"function-arguments": {
			"begin": "(\\()",
			"end": "(?=\\))(?!\\)\\s*\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.freefem"
				}
			},
			"contentName": "meta.function-call.arguments.freefem",
			"patterns": [
				{
					"name": "punctuation.separator.arguments.freefem",
					"match": "(,)"
				},
				{
					"match": "(?x)\n  (?:(?<=[,(])|^) \\s* (\\*{1,2})\n",
					"captures": {
						"1": {
							"name": "keyword.operator.unpacking.arguments.freefem"
						}
					}
				},
				{
					"include": "#builtin-parameters"
				},
				{
					"name": "keyword.operator.assignment.freefem",
					"match": "=(?!=)"
				},
				{
					"include": "$self"
				},
				{
					"match": "\\s*(\\))\\s*(\\()",
					"captures": {
						"1": {
							"name": "punctuation.definition.arguments.end.freefem"
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.freefem"
						}
					}
				}
			]
		},
		"builtin-possible-callables": {
			"patterns": [
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#builtin-types"
				}
			]
		},
		"builtin-functions": {
			"patterns": [
				{
					"name": "support.function.builtin.freefem",
					"match": "(?x)  (?<!\\.) \\b(?:(abs|acos|acosh|asin|asinh|atan|atan2|atanh|atof|atoi|ceil|imag|cos|cosh|conj|sin|sinh|max|mean|min|tan|tanh|sqrt|exp|log|log10|pow|dx|dxx|dy|dyy|dz|dzz|dxy|dxz|dyx|dyz|dzx|dzy|EigenValue|complexEigenValue) (?# 1) | (int1d|int2d|int3d|on)(?# 2)| (gslcdfugaussianP|gslcdfugaussianQ|gslcdfugaussianPinv|gslcdfugaussianQinv|gslcdfgaussianP|gslcdfgaussianQ|gslcdfgaussianPinv|gslcdfgaussianQinv|gslcdfgammaP|gslcdfgammaQ|gslcdfgammaPinv|gslcdfgammaQinv|gslcdfcauchyP|gslcdfcauchyQ|gslcdfcauchyPinv|gslcdfcauchyQinv|gslcdflaplaceP|gslcdflaplaceQ|gslcdflaplacePinv|gslcdflaplaceQinv|gslcdfrayleighP|gslcdfrayleighQ|gslcdfrayleighPinv|gslcdfrayleighQinv|gslcdfchisqP|gslcdfchisqQ|gslcdfchisqPinv|gslcdfchisqQinv|gslcdfexponentialP|gslcdfexponentialQ|gslcdfexponentialPinv|gslcdfexponentialQinv|gslcdfexppowP|gslcdfexppowQ|gslcdftdistP|gslcdftdistQ|gslcdftdistPinv|gslcdftdistQinv|gslcdffdistP|gslcdffdistQ|gslcdffdistPinv|gslcdffdistQinv|gslcdfbetaP|gslcdfbetaQ|gslcdfbetaPinv|gslcdfbetaQinv|gslcdfflatP|gslcdfflatQ|gslcdfflatPinv|gslcdfflatQinv|gslcdflognormalP|gslcdflognormalQ|gslcdflognormalPinv|gslcdflognormalQinv|gslcdfgumbel1P|gslcdfgumbel1Q|gslcdfgumbel1Pinv|gslcdfgumbel1Qinv|gslcdfgumbel2P|gslcdfgumbel2Q|gslcdfgumbel2Pinv|gslcdfgumbel2Qinv|gslcdfweibullP|gslcdfweibullQ|gslcdfweibullPinv|gslcdfweibullQinv|gslcdfparetoP|gslcdfparetoQ|gslcdfparetoPinv|gslcdfparetoQinv|gslcdflogisticP|gslcdflogisticQ|gslcdflogisticPinv|gslcdflogisticQinv|gslcdfbinomialP|gslcdfbinomialQ|gslcdfpoissonP|gslcdfpoissonQ|gslcdfgeometricP|gslcdfgeometricQ|gslcdfnegativebinomialP|gslcdfnegativebinomialQ|gslcdfpascalP|gslcdfpascalQ|gslinterpakima|gslinterpakimaperiodic|gslinterpcsplineperiodic|gslinterpcspline|gslinterpsteffen|gslinterplinear|gslinterppolynomial|gslranbernoullipdf|gslranbeta|gslranbetapdf|gslranbinomialpdf|gslranexponential|gslranexponentialpdf|gslranexppow|gslranexppowpdf|gslrancauchy|gslrancauchypdf|gslranchisq|gslranchisqpdf|gslranerlang|gslranerlangpdf|gslranfdist|gslranfdistpdf|gslranflat|gslranflatpdf|gslrangamma|gslrangammaint|gslrangammapdf|gslrangammamt|gslrangammaknuth|gslrangaussian|gslrangaussianratiomethod|gslrangaussianziggurat|gslrangaussianpdf|gslranugaussian|gslranugaussianratiomethod|gslranugaussianpdf|gslrangaussiantail|gslrangaussiantailpdf|gslranugaussiantail|gslranugaussiantailpdf|gslranlandau|gslranlandaupdf|gslrangeometricpdf|gslrangumbel1|gslrangumbel1pdf|gslrangumbel2|gslrangumbel2pdf|gslranlogistic|gslranlogisticpdf|gslranlognormal|gslranlognormalpdf|gslranlogarithmicpdf|gslrannegativebinomialpdf|gslranpascalpdf|gslranpareto|gslranparetopdf|gslranpoissonpdf|gslranrayleigh|gslranrayleighpdf|gslranrayleightail|gslranrayleightailpdf|gslrantdist|gslrantdistpdf|gslranlaplace|gslranlaplacepdf|gslranlevy|gslranweibull|gslranweibullpdf|gslsfairyAi|gslsfairyBi|gslsfairyAiscaled|gslsfairyBiscaled|gslsfairyAideriv|gslsfairyBideriv|gslsfairyAiderivscaled|gslsfairyBiderivscaled|gslsfairyzeroAi|gslsfairyzeroBi|gslsfairyzeroAideriv|gslsfairyzeroBideriv|gslsfbesselJ0|gslsfbesselJ1|gslsfbesselJn|gslsfbesselY0|gslsfbesselY1|gslsfbesselYn|gslsfbesselI0|gslsfbesselI1|gslsfbesselIn|gslsfbesselI0scaled|gslsfbesselI1scaled|gslsfbesselInscaled|gslsfbesselK0|gslsfbesselK1|gslsfbesselKn|gslsfbesselK0scaled|gslsfbesselK1scaled|gslsfbesselKnscaled|gslsfbesselj0|gslsfbesselj1|gslsfbesselj2|gslsfbesseljl|gslsfbessely0|gslsfbessely1|gslsfbessely2|gslsfbesselyl|gslsfbesseli0scaled|gslsfbesseli1scaled|gslsfbesseli2scaled|gslsfbesselilscaled|gslsfbesselk0scaled|gslsfbesselk1scaled|gslsfbesselk2scaled|gslsfbesselklscaled|gslsfbesselJnu|gslsfbesselYnu|gslsfbesselInuscaled|gslsfbesselInu|gslsfbesselKnuscaled|gslsfbesselKnu|gslsfbessellnKnu|gslsfbesselzeroJ0|gslsfbesselzeroJ1|gslsfbesselzeroJnu|gslsfclausen|gslsfhydrogenicR1|gslsfdawson|gslsfdebye1|gslsfdebye2|gslsfdebye3|gslsfdebye4|gslsfdebye5|gslsfdebye6|gslsfdilog|gslsfmultiply|gslsfellintKcomp|gslsfellintEcomp|gslsfellintPcomp|gslsfellintDcomp|gslsfellintF|gslsfellintE|gslsfellintRC|gslsferfc|gslsflogerfc|gslsferf|gslsferfZ|gslsferfQ|gslsfhazard|gslsfexp|gslsfexpmult|gslsfexpm1|gslsfexprel|gslsfexprel2|gslsfexpreln|gslsfexpintE1|gslsfexpintE2|gslsfexpintEn|gslsfexpintE1scaled|gslsfexpintE2scaled|gslsfexpintEnscaled|gslsfexpintEi|gslsfexpintEiscaled|gslsfShi|gslsfChi|gslsfexpint3|gslsfSi|gslsfCi|gslsfatanint|gslsffermidiracm1|gslsffermidirac0|gslsffermidirac1|gslsffermidirac2|gslsffermidiracint|gslsffermidiracmhalf|gslsffermidirachalf|gslsffermidirac3half|gslsffermidiracinc0|gslsflngamma|gslsfgamma|gslsfgammastar|gslsfgammainv|gslsftaylorcoeff|gslsffact|gslsfdoublefact|gslsflnfact|gslsflndoublefact|gslsflnchoose|gslsfchoose|gslsflnpoch|gslsfpoch|gslsfpochrel|gslsfgammaincQ|gslsfgammaincP|gslsfgammainc|gslsflnbeta|gslsfbeta|gslsfbetainc|gslsfgegenpoly1|gslsfgegenpoly2|gslsfgegenpoly3|gslsfgegenpolyn|gslsfhyperg0F1|gslsfhyperg1F1int|gslsfhyperg1F1|gslsfhypergUint|gslsfhypergU|gslsfhyperg2F0|gslsflaguerre1|gslsflaguerre2|gslsflaguerre3|gslsflaguerren|gslsflambertW0|gslsflambertWm1|gslsflegendrePl|gslsflegendreP1|gslsflegendreP2|gslsflegendreP3|gslsflegendreQ0|gslsflegendreQ1|gslsflegendreQl|gslsflegendrePlm|gslsflegendresphPlm|gslsflegendrearraysize|gslsfconicalPhalf|gslsfconicalPmhalf|gslsfconicalP0|gslsfconicalP1|gslsfconicalPsphreg|gslsfconicalPcylreg|gslsflegendreH3d0|gslsflegendreH3d1|gslsflegendreH3d|gslsflog|gslsflogabs|gslsflog1plusx|gslsflog1plusxmx|gslsfpowint|gslsfpsiint|gslsfpsi|gslsfpsi1piy|gslsfpsi1int|gslsfpsi1|gslsfpsin|gslsfsynchrotron1|gslsfsynchrotron2|gslsftransport2|gslsftransport3|gslsftransport4|gslsftransport5|gslsfsin|gslsfcos|gslsfhypot|gslsfsinc|gslsflnsinh|gslsflncosh|gslsfanglerestrictsymm|gslsfanglerestrictpos|gslsfzetaint|gslsfzeta|gslsfzetam1|gslsfzetam1int|gslsfhzeta|gslsfetaint|gslsfeta)(?# 3) | (adaptmesh|gmshload|gmshload3|buildmesh|square|square3|readmesh|readmesh3|cube|movemesh|movemesh23) (?# 4) | (mpiAlltoall|mpiAlltoallv|mpiAllgather|mpiAllgatherv|mpiAllReduce|mpiBarrier|mpiGather|mpiGatherv|mpiReduce|mpiScatter|mpiScatterv|mpiSize|mpiWait|mpiWaitAny|mpiWtick|mpiWtime|mpiRank) (?# 5)| (clock|plot|getARGV) (?# 6)| (BFGS|AffineCG|AffineGMRES|LinearCG|LinearGMRES) (?# 7) | (randinit|randint31|randint32|random|randreal1|randreal2|randreal3|randres53|srandom|srandomdev) (?# 8))\\b",
					"captures": {
						"1":{"name": "support.function.builtin.math.freefem"},
						"2":{"name": "support.function.builtin.integral.freefem"},
						"3":{"name": "support.function.builtin.gsl.freefem"},
						"4":{"name": "support.function.builtin.mesh.freefem"},
						"5":{"name": "support.function.builtin.mpi.freefem"},
						"6":{"name": "support.function.builtin.utils.freefem"},
						"7":{"name": "support.function.builtin.solver.freefem"},
						"8":{"name": "support.function.builtin.rand.freefem"}
					}
				},
				{
					"name": "support.function.builtin.member-access.freefem",
					"match": "(?x) \\b(be)\\b"
				}
			]
		},
		"builtin-types": {
			"match": "(?x)  (?<!\\.) \\b(?:(bool | complex | int | string | real | matrix | dmatrix) (?# 1) | (gslspline) (?# 2) | (mesh|mesh3|meshS|meshL) (?# 3) | (mpiComm|mpiGroup|mpiRequest) (?# 4) | (ifstream | ofstream) (?# 5) | (solve | varf |  problem | fespace) (?# 6) | (border | curve3) (?# 7))\\b",
			"captures": {
				"1":{"name": "support.type.math.freefem"},
				"2":{"name": "support.type.gsl.freefem"},
				"3":{"name": "support.type.mesh.freefem"},
				"4":{"name": "support.type.mpi.freefem"},
				"5":{"name": "support.type.utils.freefem"},
				"6":{"name": "support.type.problem.freefem"},
				"7":{"name": "support.type.problem.freefem"}
			}
		},
		"builtin-parameters":{
			"match": "\\b(dim|cmm|solver|t|fill|value|nbiso|veps|precon|eps|eta|nbiter|stop|label|region|nev|sym|tol|ivalue|vector|sigma|wait|tgv|boundary|aspectratio|ps|viso|coef|varrow|nbarrow|WindowIndex|prev|hsv|grey|bb|bw|qfe|qforder|qft|qfV|order|epsilon|minclustersize|maxblocksize|alpha|combinedcoef)\\s*(=)(?!=)",
			"captures": {
				"1": {
					"name": "variable.parameter.function-call.freefem"
				},
				"2": {
					"name": "keyword.operator.assignment.freefem"
				}
			}
		},
		"builtin-member-access":{
			"match": "(?x) \\b(x|y|z|nv|nt|nbe|sort|max|min|n|m|imin|imax|jmax|jmin|quantile)\\b",
			"captures": {
				"1": {
					"name": "variable.parameter.member-access.freefem"
				}
			}
		},
		"special-variables": {
			"match": "(?x)\n  \\b (?<!\\.) (?:\n    (x|y|z) | (area|volume|BoundaryEdge|edgeOrientation|hTriangle|InternalEdge|lenEdge|nTonEdge|nuEdge|nuTriangle|N|P)| (ARGV|version|verbosity) |(CG|GMRES|sparsesolver|Cholesky|Crout) | (qf1pE|qf1pElump|qf1pT|qf1pTlump|qfV1|qfV1lump|qf2pE|qf2pT|qf2pT4P1|qfV2|qf3pE|qf4pE|qf5pE|qf5pT|qfV5|qf7pT|qf9pT|qfnbpE)| (BDM1|BDM1Ortho|Edge03d|Edge13d|Edge23d|FEQF|HCT|P0|P03d|P0Edge|P1|P13d|P1b|P1b3d|P1bl|P1bl3d|P1dc|P1Edge|P1nc|P2|P23d|P2b|P2BR|P2dc|P2Edge|P2h|P2Morley|P2pnc|P3|P3dc|P3Edge|P4|P4dc|P4Edge|P5Edge|RT0|RT03d|RT0Ortho|RT1|RT1Ortho|RT2|RT2Ortho) |(mpirank|mpisize|mpiCommWorld|mpiSUM|mpiBXOR|mpiLAND|mpiLOR|mpiLXOR|mpiMAX|mpiMIN|mpiPROD|mpiBAND|mpiUndefined|mpiAnySource) \n  )\\b\n",
			"captures": {
				"1": {
					"name": "variable.language.special.coordinates.freefem"
				},
				"2": {
					"name": "variable.language.special.mesh.freefem"
				},
				"3": {
					"name": "variable.language.special.utils.freefem"
				},
				"4": {
					"name": "variable.language.special.solvers.freefem"
				},
				"5": {
					"name": "variable.language.special.quadratures.freefem"
				},
				"6": {
					"name": "variable.language.special.FE.freefem"
				},
				"7": {
					"name": "variable.language.special.mpi.freefem"
				}
			}
		}
	}
}